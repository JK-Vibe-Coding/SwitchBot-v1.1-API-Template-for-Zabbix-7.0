zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: a4efec0908794ec1bfefe0bdc224a9b3
      name: Templates/IoT
  templates:
    - uuid: 211cf480b10c4726b2348eef1fc61631
      template: SwitchBot_API_v1_1
      name: 'SwitchBot API v1.1'
      description: |
        JS-only (Script items) with signed SwitchBot v1.1 requests
        Zabbix  7.0 template for SwitchBot API v1.1, vibe-coded with GPT-5.
        For personal  use / PoC. 
        
        Works fine—even though I don’t really know why.
      vendor:
        name: Custom
        version: '1.1'
      groups:
        - name: Templates/IoT
      discovery_rules:
        - uuid: a2e6dcd4f7fb49c596e8fb2fe361f080
          name: 'SwitchBot: Discover Bots'
          type: SCRIPT
          key: switchbot.discover.bot.js
          delay: '{$SWITCHBOT.INTERVAL}'
          status: DISABLED
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          description: 'Disabled because current Bot models always return battery=100 in Cloud API status, so battery monitoring is not reliable.'
          item_prototypes:
            - uuid: 0a17a061fb7044548b43abf500690037
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.bot[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.bot.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 3ad2f8356395460dacfa563dd03c859c
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.bot[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: c2bbb2dd0a404158b6c27f340c438ba4
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.bot.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Bot'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 9e6c6ae5490447e88320b655ae196d86
          name: 'SwitchBot: Discover Bulbs'
          type: SCRIPT
          key: switchbot.discover.bulb.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: 192ddae839ff4d33996694b03d215207
              name: 'SwitchBot [{#DEVICE_NAME}] Brightness'
              type: DEPENDENT
              key: 'switchbot.brightness.bulb[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              description: 'Brightness value mapped: bright=1, dim=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.brightness
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.bulb.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: brightness
                - tag: source
                  value: switchbot
            - uuid: 6319dc4fa4ad4f89bc497d88f2f213b2
              name: 'SwitchBot [{#DEVICE_NAME}] Power'
              type: DEPENDENT
              key: 'switchbot.power.bulb[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Power state mapped: on=1, off=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.power
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - 'var v=String(value||'''').toLowerCase(); if(v===''on'') return 1; if(v===''off'') return 0; return null;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.bulb.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: power
                - tag: source
                  value: switchbot
            - uuid: 22a7d1650cdd4e959391c3cb7ad52f0f
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.bulb.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Color Bulb'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: faf480fe4a8e485e88d3de39cfa564b9
          name: 'SwitchBot: Discover Contact Sensors'
          type: SCRIPT
          key: switchbot.discover.contact.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: 9573975d1d2d403698a889da6538e53d
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.contact[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.contact.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 5c89be6e9e904b249f197c9e7ca3dfbc
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.contact[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%})'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: 6e65e8ebaf354488825ac59446c7065a
              name: 'SwitchBot [{#DEVICE_NAME}] Brightness'
              type: DEPENDENT
              key: 'switchbot.brightness.contact[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Brightness value mapped: bright=1, dim=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.brightness
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - 'var v=value;if(v===null||v===undefined) return null; v=String(v).toLowerCase(); if(v===''bright'') return 1; if(v===''dim'') return 0; return null;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.contact.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: brightness
                - tag: source
                  value: switchbot
            - uuid: a12df1a843b54b3aa958c60a0daf8fc7
              name: 'SwitchBot [{#DEVICE_NAME}] Motion'
              type: DEPENDENT
              key: 'switchbot.motion.contact[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Motion value mapped: true=1, false=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.moveDetected
                  error_handler: DISCARD_VALUE
                - type: BOOL_TO_DECIMAL
                  parameters:
                    - ''
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.contact.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: motion
                - tag: source
                  value: switchbot
            - uuid: 545459f5b3c2469191f749bca679e9a7
              name: 'SwitchBot [{#DEVICE_NAME}] Open state'
              type: DEPENDENT
              key: 'switchbot.open.contact[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Open state mapped: open=1, close=0, timeOutNotClose=2'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.openState
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - 'var v=String(value||'''').toLowerCase(); if(v===''open'') return 1; if(v===''close'') return 0; if(v===''timeoutnotclose''||v===''timeOutNotClose''.toLowerCase()) return 2; return null;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.contact.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: open
                - tag: source
                  value: switchbot
            - uuid: 26af0c3f853746f98aec4f205d089a73
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.contact.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Contact Sensor'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 89ea94cacfa74ca7bf3845dbb901b778
          name: 'SwitchBot: Discover Curtains'
          type: SCRIPT
          key: switchbot.discover.curtain.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: 70351975b32f4261be97a59c3806ca86
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.curtain[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.curtain.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 8c2c2bb18f544604a823dfca460f4963
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.curtain[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%})'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: 4497a34395c44394b6aa6eb4796dee2e
              name: 'SwitchBot [{#DEVICE_NAME}] Curtain position'
              type: DEPENDENT
              key: 'switchbot.curtain.pos.curtain[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.slidePosition
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.curtain.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: position
                - tag: source
                  value: switchbot
            - uuid: e92e915e76d544cb80fd3560af4f5fed
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.curtain.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Curtain'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 08ecf141b3624c4b8e26a0a53f5e71ee
          name: 'SwitchBot: Discover Meters (CO2)'
          type: SCRIPT
          key: switchbot.discover.meter.co2.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: 49cd67d529bb48a7aa5dd46dc4d3fbd9
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.meterco2[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meterco2.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 1fd2cdb1149d4d58b2e15a88c25eb4af
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.meterco2[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%})'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: 9f92c0c9854e47f58b4a783be4fcee66
              name: 'SwitchBot [{#DEVICE_NAME}] CO2'
              type: DEPENDENT
              key: 'switchbot.co2.meterco2[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: 'ppm (CO2)'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.CO2
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meterco2.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: co2
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: co2
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: d5828ee758714faa814db73951fa3ff4
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.co2.meterco2[{#DEVICE_ID}],#1)>{$SWITCHBOT.CO2.MAX}'
                  name: 'SwitchBot [{#DEVICE_NAME}] CO2 high (>{$SWITCHBOT.CO2.MAX} ppm)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: co2
                    - tag: source
                      value: switchbot
            - uuid: 7f2652df1bb442ee82acea10b71bee42
              name: 'SwitchBot [{#DEVICE_NAME}] Humidity'
              type: DEPENDENT
              key: 'switchbot.hum.meterco2[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.humidity
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meterco2.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: humidity
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: cbb8e8c94ac84d608aa473a979642c9e
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.hum.meterco2[{#DEVICE_ID}],#1)>{$SWITCHBOT.HUM.MAX}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Humidity high (>{$SWITCHBOT.HUM.MAX}%)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: humidity
                    - tag: source
                      value: switchbot
                - uuid: 286f08e8674847f08baca64e6ac70970
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.hum.meterco2[{#DEVICE_ID}],#1)<{$SWITCHBOT.HUM.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Humidity low (<{$SWITCHBOT.HUM.MIN}%)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: humidity
                    - tag: source
                      value: switchbot
            - uuid: f49794e2daca4864883b2726921afaa3
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.meterco2.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
            - uuid: 8e7bf52e845d4b118af9545a94577a52
              name: 'SwitchBot [{#DEVICE_NAME}] Temperature'
              type: DEPENDENT
              key: 'switchbot.temp.meterco2[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.temperature
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meterco2.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: temperature
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Meter Pro CO2'' || @.deviceType == ''MeterPro(CO2)'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 3aeeba9ea0df4174900740014b8be061
          name: 'SwitchBot: Discover Meters'
          type: SCRIPT
          key: switchbot.discover.meter.noco2.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: ae27e3fd4d0c40d4b10682b00f3a3300
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.meter[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meter.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 4a69698d71bb4e659f10728a6f62a161
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.meter[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%})'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: 6224f26c4084446caddc2733256c6a0b
              name: 'SwitchBot [{#DEVICE_NAME}] Humidity'
              type: DEPENDENT
              key: 'switchbot.hum.meter[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.humidity
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meter.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: humidity
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 96bf40d67bc2431bb13bf58a89404844
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.hum.meter[{#DEVICE_ID}],#1)>{$SWITCHBOT.HUM.MAX}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Humidity high (>{$SWITCHBOT.HUM.MAX}%)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: humidity
                    - tag: source
                      value: switchbot
                - uuid: 33f27d0f1f0d497d9daacbfc409ee477
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.hum.meter[{#DEVICE_ID}],#1)<{$SWITCHBOT.HUM.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Humidity low (<{$SWITCHBOT.HUM.MIN}%)'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: humidity
                    - tag: source
                      value: switchbot
            - uuid: 1acb519174bc4f48ab30d5b04ab58ad6
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.meter.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
            - uuid: bebd5877c6a9464a84591e37ba303782
              name: 'SwitchBot [{#DEVICE_NAME}] Temperature'
              type: DEPENDENT
              key: 'switchbot.temp.meter[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: °C
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.temperature
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.meter.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: temperature
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Meter'' || @.deviceType == ''Meter Plus'' || @.deviceType == ''MeterPro'' || @.deviceType == ''Outdoor Meter'' || @.deviceType == ''WoIOSensor'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 0cef24f7b534482790a7d7ca8f00d7fa
          name: 'SwitchBot: Discover Motion Sensors'
          type: SCRIPT
          key: switchbot.discover.motion.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: 30cb916b49d94d189f76bb66452b49a1
              name: 'SwitchBot [{#DEVICE_NAME}] Battery'
              type: DEPENDENT
              key: 'switchbot.battery.motion[{#DEVICE_ID}]'
              delay: '0'
              value_type: FLOAT
              units: '%'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.battery
                  error_handler: DISCARD_VALUE
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.motion.js[{#DEVICE_ID}]'
              tags:
                - tag: capability
                  value: battery
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: battery
                - tag: source
                  value: switchbot
              trigger_prototypes:
                - uuid: 3d04468412694779a6fbb4694874089a
                  expression: 'last(/SwitchBot_API_v1_1/switchbot.battery.motion[{#DEVICE_ID}],#1)<{$SWITCHBOT.BATTERY.MIN}'
                  name: 'SwitchBot [{#DEVICE_NAME}] Battery low (<{$SWITCHBOT.BATTERY.MIN}%})'
                  priority: WARNING
                  manual_close: 'YES'
                  tags:
                    - tag: device.type
                      value: '{#DEVICE_TYPE}'
                    - tag: metric
                      value: battery
                    - tag: source
                      value: switchbot
            - uuid: 75cf52235ac741a493d5624ed508af9f
              name: 'SwitchBot [{#DEVICE_NAME}] Motion'
              type: DEPENDENT
              key: 'switchbot.motion.motion[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Motion value mapped: true=1, false=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.motionDetected
                  error_handler: DISCARD_VALUE
                - type: BOOL_TO_DECIMAL
                  parameters:
                    - ''
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.motion.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: motion
                - tag: source
                  value: switchbot
            - uuid: 52faa12658c747f3ab8d9d94573a476e
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.motion.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Motion Sensor'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: 992b1284c80a4da68a0efd15cf835bc2
          name: 'SwitchBot: Discover Plugs'
          type: SCRIPT
          key: switchbot.discover.plug.js
          delay: '{$SWITCHBOT.INTERVAL}'
          params: |
            var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}';
               function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
            function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
            
            function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
            function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                 if(c<128) out.push(c);
              else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                 else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                   c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                 } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
            } return out;    }
            function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++) w[i>>2]|=b[i]<<(24-(i%4)*8);    return w; }
            function _wordsToBytes(w){ var b=[],i=0; for(;i<w.length*4;i++)    b.push((w[i>>2]>>>(24-(i%4)*8))&255); return b; }
            function sha256(msg){    var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
              var H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                 var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                   0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                   0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                   0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                   0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                   0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                   0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                   0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                 var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
              for(var i=0;i<m.length;i+=16){ var w=new Array(64),j;    for(j=0;j<16;j++) w[j]=m[i+j]|0;
                for(;j<64;j++){ var s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                     var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10); w[j]=(w[j-16]+s0+w[j-7]+s1)|0;    }
                var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                   for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var ch=(e&f)^(~e&g);
                     var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                     var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                  h=g; g=f; f=e;    e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                H[0]=(H[0]+a)|0; H[1]=(H[1]+b)|0;    H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0; H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;    H[7]=(H[7]+h)|0; }
              return _wordsToBytes(H);
            }
            function hmac_sha256(key,msg){    var block=64,k=_toBytes(key); if(k.length>block) k=sha256(k);
              if(k.length<block){    var pad=new Array(block-k.length); for(var i=0;i<pad.length;i++) pad[i]=0;    k=k.concat(pad); }
              var o=[],ii=[],x=0,b; for(;x<block;x++){ b=k[x]||0;    o[x]=0x5c^b; ii[x]=0x36^b; }
              return sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
               }
            function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                 for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                   var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                   if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){  e4=64;   }
                out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
              return out;
            }
            
            var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
               var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
            var url=API.replace(/\/+$/,'')+'/v1.1/devices';    var resp=req.get(url);
            if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
          filter:
            conditions:
              - macro: '{#DEVICE_TYPE}'
                operator: EXISTS
                formulaid: A
          item_prototypes:
            - uuid: f2b449f1887e43b3a510b853c046effd
              name: 'SwitchBot [{#DEVICE_NAME}] Power'
              type: DEPENDENT
              key: 'switchbot.power.plug[{#DEVICE_ID}]'
              delay: '0'
              trends: '0'
              description: 'Power state mapped: on=1, off=0'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.body.power
                  error_handler: DISCARD_VALUE
                - type: JAVASCRIPT
                  parameters:
                    - 'var v=String(value||'''').toLowerCase(); if(v===''on'') return 1; if(v===''off'') return 0; return null;'
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              master_item:
                key: 'switchbot.status.plug.js[{#DEVICE_ID}]'
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: power
                - tag: source
                  value: switchbot
            - uuid: 14dc0198301a44fbb5140eb609575b58
              name: 'SwitchBot [{#DEVICE_NAME}] Get JSON'
              type: SCRIPT
              key: 'switchbot.status.plug.js[{#DEVICE_ID}]'
              delay: '{$SWITCHBOT.INTERVAL}'
              history: '0'
              value_type: TEXT
              trends: '0'
              params: |
                var API='{$SWITCHBOT.API}',TOKEN='{$SWITCHBOT.TOKEN}',SECRET='{$SWITCHBOT.SECRET}',DID='{#DEVICE_ID}';
                   function nowMillis(){ return Date.now ? Date.now() : (new Date()).getTime();    }
                function uuid4(){ var d=nowMillis(); return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){    var r=(d+Math.random()*16)%16|0; d=Math.floor(d/16); return (c==='x'?r:(r&0x3|0x8)).toString(16);    }); }
                
                function _rotr(x, n){ return (x>>>n) | (x<<(32-n)); }
                function    _toBytes(s){ var out=[],i=0,c; for(;i<s.length;i++){ c=s.charCodeAt(i);
                     if(c<128) out.push(c);
                  else if(c<2048) out.push((c>>6)|192,(c&63)|128);
                     else if((c&0xFC00)===0xD800 && i+1<s.length && (s.charCodeAt(i+1)&0xFC00)===0xDC00){
                       c=0x10000+((c&0x3FF)<<10)+(s.charCodeAt(++i)&0x3FF);
                    out.push((c>>18)|240,((c>>12)&63)|128,((c>>6)&63)|128,(c&63)|128);
                     } else out.push((c>>12)|224,((c>>6)&63)|128,(c&63)|128);
                } return  out;   }
                function _bytesToWords(b){ var w=[],i=0; for(;i<b.length;i++)  w[i>>2]|=b[i]<<(24-(i%4)*8);   return w; }
                function _wordsToBytes(w){  var b=[],i=0; for(;i<w.length*4;i++)   b.push((w[i>>2]>>>(24-(i%4)*8))&255);  return b; }
                function sha256(msg){   var bytes=(typeof msg==='string')?_toBytes(msg):msg.slice(0);
                   var  H=[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19];
                     var K=[0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
                       0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
                       0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
                       0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
                       0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
                       0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
                       0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
                       0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2];
                     var l=bytes.length*8, m=_bytesToWords(bytes); m[l>>5]|=0x80<<(24-(l%32));    m[((l+64>>9)<<4)+15]=l;
                  for(var i=0;i<m.length;i+=16){ var w=new  Array(64),j;   for(j=0;j<16;j++) w[j]=m[i+j]|0;
                    for(;j<64;j++){ var  s0=_rotr(w[j-15],7)^_rotr(w[j-15],18)^(w[j-15]>>>3);
                        var s1=_rotr(w[j-2],17)^_rotr(w[j-2],19)^(w[j-2]>>>10);  w[j]=(w[j-16]+s0+w[j-7]+s1)|0;   }
                    var a=H[0],b=H[1],c=H[2],d=H[3],e=H[4],f=H[5],g=H[6],h=H[7];
                       for(j=0;j<64;j++){ var S1=_rotr(e,6)^_rotr(e,11)^_rotr(e,25); var   ch=(e&f)^(~e&g);
                       var t1=(h+S1+ch+K[j]+w[j])|0; var S0=_rotr(a,2)^_rotr(a,13)^_rotr(a,22);
                         var maj=(a&b)^(a&c)^(b&c); var t2=(S0+maj)|0;
                      h=g; g=f;  f=e;   e=(d+t1)|0; d=c; c=b; b=a; a=(t1+t2)|0; }
                    H[0]=(H[0]+a)|0;  H[1]=(H[1]+b)|0;   H[2]=(H[2]+c)|0; H[3]=(H[3]+d)|0; H[4]=(H[4]+e)|0;  H[5]=(H[5]+f)|0; H[6]=(H[6]+g)|0;   H[7]=(H[7]+h)|0; }
                  return _wordsToBytes(H);
                 }
                function hmac_sha256(key,msg){   var block=64,k=_toBytes(key); if(k.length>block)  k=sha256(k);
                  if(k.length<block){   var pad=new Array(block-k.length);  for(var i=0;i<pad.length;i++) pad[i]=0;   k=k.concat(pad); }
                  var o=[],ii=[],x=0,b;  for(;x<block;x++){ b=k[x]||0;   o[x]=0x5c^b; ii[x]=0x36^b; }
                  return  sha256(String.fromCharCode.apply(null,o.concat(sha256(String.fromCharCode.apply(null,ii.concat(_toBytes(msg)))))));
                   }
                function b64(bytes){ var tab='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',out='',i=0;
                     for(;i<bytes.length;){ var c1=bytes[i++]||0,c2=bytes[i++]||0,c3=bytes[i++]||0;
                       var e1=c1>>2,e2=((c1&3)<<4)|(c2>>4),e3=((c2&15)<<2)|(c3>>6),e4=c3&63;
                       if(isNaN(bytes[i-2])){ e3=64; e4=64; } else if(isNaN(bytes[i-1])){    e4=64; }
                    out+=tab.charAt(e1)+tab.charAt(e2)+(e3==64?'=':tab.charAt(e3))+(e4==64?'=':tab.charAt(e4));    }
                  return out;
                }
                
                var t=String(nowMillis()),nonce=uuid4(),sign=b64(hmac_sha256(SECRET,TOKEN+t+nonce));
                   var req=new HttpRequest(); req.addHeader('Authorization: '+TOKEN); req.addHeader('sign:    '+sign); req.addHeader('t: '+t); req.addHeader('nonce: '+nonce); req.addHeader('Content-Type:    application/json; charset=utf8');
                var url=API.replace(/\/+$/,'')+'/v1.1/devices/'+DID+'/status';    var resp=req.get(url);
                if(req.getStatus()>=200&&req.getStatus()<300&&resp){return    resp;} return JSON.stringify({status:req.getStatus(),error:true,body:resp||''});
              timeout: 10s
              tags:
                - tag: class
                  value: iot
                - tag: device.type
                  value: '{#DEVICE_TYPE}'
                - tag: metric
                  value: raw
                - tag: source
                  value: switchbot
          timeout: 10s
          lld_macro_paths:
            - lld_macro: '{#DEVICE_ID}'
              path: $.deviceId
            - lld_macro: '{#DEVICE_NAME}'
              path: $.deviceName
            - lld_macro: '{#DEVICE_TYPE}'
              path: $.deviceType
            - lld_macro: '{#HUB_ID}'
              path: $.hubDeviceId
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$.body.deviceList[?(@.deviceType == ''Plug'' || @.deviceType == ''Plug Mini (US)'' || @.deviceType == ''Plug Mini (JP)'')]'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
      tags:
        - tag: class
          value: software
        - tag: target
          value: switchbot
      macros:
        - macro: '{$SWITCHBOT.API}'
          value: 'https://api.switch-bot.com'
        - macro: '{$SWITCHBOT.BATTERY.MIN}'
          value: '20'
        - macro: '{$SWITCHBOT.CO2.MAX}'
          value: '1000'
        - macro: '{$SWITCHBOT.HUM.MAX}'
          value: '70'
        - macro: '{$SWITCHBOT.HUM.MIN}'
          value: '30'
        - macro: '{$SWITCHBOT.INTERVAL}'
          value: 10m
        - macro: '{$SWITCHBOT.SECRET}'
          type: SECRET_TEXT
          description: 'SwitchBot API secret used for HMAC sign.'
        - macro: '{$SWITCHBOT.TOKEN}'
          type: SECRET_TEXT
          description: 'SwitchBot API token used in Authorization header.'
